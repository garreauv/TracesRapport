	ADDSP #9
	TSTO #9
; Code de la table des méthodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Code de la table des méthodes de C
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.C.getX, R0
	STORE R0, 5(GB)
	LOAD code.C.diag, R0
	STORE R0, 6(GB)
; Start main program
; Variables declarations:
	NEW #3, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.C
	POP R2
	STORE R2, 9(GB)
; Beginning of main instructions:
; Appel de méthode :
	ADDSP #1
	LOAD 9(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	STORE R2, 8(GB)
	LOAD 8(GB), R1
	WFLOAT
; Appel de méthode :
	ADDSP #2
	LOAD 9(GB), R2
	STORE R2, 0(SP)
	LOAD #2, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #1
; Appel de méthode :
	ADDSP #1
	LOAD 9(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	STORE R2, 8(GB)
	LOAD 8(GB), R1
	WFLOAT
; Appel de méthode :
	ADDSP #2
	LOAD 9(GB), R2
	STORE R2, 0(SP)
	LOAD #2, R2
	STORE R2, -1(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #1
; Appel de méthode :
	ADDSP #1
	LOAD 9(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	STORE R2, 8(GB)
	LOAD 8(GB), R1
	WFLOAT
	HALT
; End main program
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0
	RTS
init.C:
; Initialisation de C.y
	LOAD #0, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
; Initialisation de C.x
	LOAD #0x0.0p0, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
; Initialisation explicite de C.y
; Initialisation explicite de C.x
	RTS
code.C.getX:
	PUSH R2
	PUSH R3
	LOAD -2(LB), R1
	LOAD 2(R1), R2
	LOAD R2, R0
	BRA fin.C.getX
fin.C.getX:
; Restauration des registres : 
	POP R3
	POP R2
	LOAD R0, R2
	RTS
code.C.diag:
	PUSH R2
	PUSH R3
	LOAD -2(LB), R1
	LOAD 2(R1), R2
	LOAD #0x1.4p2, R3
	PUSH R2
	LOAD R3, R2
	LOAD #0x1.4p2, R3
	PUSH R2
	LOAD R3, R2
	LOAD #2, R3
	FLOAT R3, R3
	ADD R2, R3
	POP R2
	DIV R3, R2
	LOAD R2, R3
	POP R2
	DIV R3, R2
	LOAD -3(LB), R3
	FLOAT R3, R3
	ADD R3, R2
	LOAD -2(LB), R1
	STORE R2, 2(R1)
	LOAD -2(LB), R1
	LOAD 1(R1), R2
	LOAD -3(LB), R3
	ADD R3, R2
	LOAD -2(LB), R1
	STORE R2, 1(R1)
fin.C.diag:
; Restauration des registres : 
	POP R3
	POP R2
	RTS
