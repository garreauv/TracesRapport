	ADDSP #7
	TSTO #9
	BOV stack_overflow_error
; Code de la table des méthodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Code de la table des méthodes de A
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.A.calc, R0
	STORE R0, 5(GB)
	LOAD code.A.compare, R0
	STORE R0, 6(GB)
; Start main program
; Variables declarations:
	NEW #4, R2
	LEA 3(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.A
	POP R2
	STORE R2, 7(GB)
; Beginning of main instructions:
; Appel de méthode :
	ADDSP #1
	LOAD 7(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	LOAD R0, R2
	LOAD R2, R1
	WINT
; Appel de méthode :
	ADDSP #1
	LOAD 7(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #0
	LOAD R0, R2
	CMP #1, R2
	BNE E_Sinon.11
	WSTR "ok"
	BRA E_Fin.1
E_Sinon.11:
	WSTR "error"
E_Fin.1:
	HALT
; End main program
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0
	RTS
init.A:
; Initialisation de A.x
	LOAD #0x0.0p0, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
; Initialisation de A.y
	LOAD #0x0.0p0, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
; Initialisation de A.z
	LOAD -2(LB), R1
	STORE R0, 3(R1)
	TSTO #6
	PUSH R6
	PUSH R5
	PUSH R4
	PUSH R3
	PUSH R2
; Initialisation explicite de A.x
	LOAD #0x1.cp1, R2
	STORE R2, 1(R1)
; Initialisation explicite de A.y
	LOAD #0x1.f33334p2, R2
	LOAD #3, R3
	FLOAT R3, R3
	LOAD 1(R2), R4
	LOAD #6, R5
	FLOAT R5, R5
	LOAD #0x1.88p4, R6
	ADD R6, R5
	BOV overflow_error
	MUL R5, R4
	BOV overflow_error
	ADD R4, R3
	BOV overflow_error
	MUL R3, R2
	BOV overflow_error
	LOAD 1(R2), R3
	MUL R3, R2
	BOV overflow_error
	STORE R2, 2(R1)
; Initialisation explicite de A.z
	LOAD 2(R2), R2
	LOAD 1(R2), R3
	LOAD #0, R4
	CMP R3, R2
	BEQ Assign2
	LOAD #1, R4
Assign2:
	STORE R4, 3(R1)
	POP R2
	POP R3
	POP R4
	POP R5
	POP R6
	RTS
code.A.calc:
; Sauvegarde des registres : 
	TSTO #4
	BOV stack_overflow_error
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD #0x1.91eb86p1, R2
	LOAD -2(LB), R1
	LOAD 2(R1), R3
	MUL R3, R2
	BOV overflow_error
	LOAD #42, R3
	FLOAT R3, R3
	LOAD #0x1.3be76cp0, R4
	CMP #0x0.0p0, R4
	BEQ division_by_zero_error
	DIV R4, R3
	ADD R3, R2
	BOV overflow_error
	LOAD -2(LB), R1
	STORE R2, 1(R1)
	LOAD #0x1.5p5, R2
	LOAD -2(LB), R1
	LOAD 1(R1), R3
	CMP #0x0.0p0, R3
	BEQ division_by_zero_error
	DIV R3, R2
	LOAD -2(LB), R1
	STORE R2, 2(R1)
	LOAD -2(LB), R1
	LOAD 1(R1), R2
	LOAD -2(LB), R1
	LOAD 2(R1), R3
	ADD R3, R2
	BOV overflow_error
	LOAD #0x1.91eb86p1, R3
	ADD R3, R2
	BOV overflow_error
	LOAD R2, R0
	BRA fin.A.calc
fin.A.calc:
; Restauration des registres : 
	POP R2
	POP R3
	POP R4
	RTS
code.A.compare:
; Sauvegarde des registres : 
	TSTO #4
	BOV stack_overflow_error
	PUSH R4
	PUSH R3
	PUSH R2
	LOAD -2(LB), R1
	LOAD 1(R1), R2
	LOAD -2(LB), R1
	LOAD 2(R1), R3
	LOAD #0, R4
	CMP R3, R2
	BGE Assign3
	LOAD #1, R4
Assign3:
	LOAD -2(LB), R1
	LOAD 3(R1), R4
	MUL R4, R2
	LOAD R2, R0
	BRA fin.A.compare
fin.A.compare:
; Restauration des registres : 
	POP R2
	POP R3
	POP R4
	RTS
division_by_zero_error:
	WSTR "Error: Division by Zero"
	WNL
	ERROR
overflow_error:
	WSTR "Error: Overflow during arithmetic operation"
	WNL
	ERROR
NullDeferenceError:
	WSTR "Error: deferencement null"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
