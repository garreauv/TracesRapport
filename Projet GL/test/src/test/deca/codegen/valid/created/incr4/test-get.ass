	ADDSP #10
	TSTO #14
	BOV stack_overflow_error
; Code de la table des méthodes de Object
	LOAD #null, R0
	STORE R0, 1(GB)
	LOAD code.Object.equals, R0
	STORE R0, 2(GB)
; Code de la table des méthodes de A
	LEA 1(GB), R0
	STORE R0, 3(GB)
	LOAD code.Object.equals, R0
	STORE R0, 4(GB)
	LOAD code.A.getX, R0
	STORE R0, 5(GB)
; Code de la table des méthodes de B
	LEA 1(GB), R0
	STORE R0, 6(GB)
	LOAD code.Object.equals, R0
	STORE R0, 7(GB)
	LOAD code.B.getY, R0
	STORE R0, 8(GB)
	LOAD code.B.setY, R0
	STORE R0, 9(GB)
; Start main program
; Variables declarations:
	NEW #3, R2
	LEA 6(GB), R0
	STORE R0, 0(R2)
	PUSH R2
	BSR init.B
	POP R2
	STORE R2, 10(GB)
; Beginning of main instructions:
; Appel de méthode :
	ADDSP #1
	LOAD 10(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 3(R2)
	SUBSP #0
	LOAD R0, R2
; Appel de méthode :
	ADDSP #1
	LOAD 10(GB), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	LOAD R0, R2
	LOAD #7, R3
	CMP R3, R2
	BNE E_Sinon.11
	WSTR "ok"
	BRA E_Fin.1
E_Sinon.11:
E_Fin.1:
; Appel de méthode :
	ADDSP #1
	LOAD 10(GB), R2
	LOAD R2, R1
	LOAD 2(R1), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	LOAD R0, R2
; Appel de méthode :
	ADDSP #1
	LOAD 10(GB), R3
	STORE R3, 0(SP)
	LOAD 0(SP), R3
	CMP #null, R3
	BEQ NullDeferenceError
	LOAD 0(R3), R3
	BSR 2(R3)
	SUBSP #0
	LOAD R0, R2
	CMP R3, R2
	BNE E_Sinon.22
	WSTR "ok"
	BRA E_Fin.2
E_Sinon.22:
	WSTR "error"
E_Fin.2:
	HALT
; End main program
code.Object.equals:
	LOAD -2(LB), R0
	CMP -3(LB), R0
	SEQ R0
	RTS
init.A:
; Initialisation de A.x
	LOAD #0, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
	TSTO #0
; Initialisation explicite de A.x
	LOAD #7, R2
	STORE R2, 1(R1)
	RTS
init.B:
; Initialisation de B.y
	LOAD #0, R0
	LOAD -2(LB), R1
	STORE R0, 1(R1)
; Initialisation de B.a
	LOAD #null, R0
	LOAD -2(LB), R1
	STORE R0, 2(R1)
	TSTO #0
; Initialisation explicite de B.y
; Initialisation explicite de B.a
	LOAD #null, R0
	STORE R0, 2(R2)
	RTS
code.A.getX:
; Sauvegarde des registres : 
	TSTO #0
	BOV stack_overflow_error
	LOAD 1(R2), R2
	LOAD R2, R0
	BRA fin.A.getX
fin.A.getX:
; Restauration des registres : 
	RTS
code.B.getY:
; Sauvegarde des registres : 
	TSTO #0
	BOV stack_overflow_error
	LOAD 1(R2), R2
	LOAD R2, R0
	BRA fin.B.getY
fin.B.getY:
; Restauration des registres : 
	RTS
code.B.setY:
; Sauvegarde des registres : 
	TSTO #0
	BOV stack_overflow_error
; Appel de méthode :
	ADDSP #1
	LOAD 2(R2), R2
	STORE R2, 0(SP)
	LOAD 0(SP), R2
	CMP #null, R2
	BEQ NullDeferenceError
	LOAD 0(R2), R2
	BSR 2(R2)
	SUBSP #0
	LOAD R0, R2
	LOAD -2(LB), R1
	STORE R2, 1(R1)
fin.B.setY:
; Restauration des registres : 
	RTS
NullDeferenceError:
	WSTR "Error: deferencement null"
	WNL
	ERROR
stack_overflow_error:
	WSTR "Error: Stack Overflow"
	WNL
	ERROR
